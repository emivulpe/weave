{% extends 'exerciser/teacher_interface_base.html' %}

{% block style %}
#container{
	min-width: 310px;
	height: 400px;
	margin: 0 auto;
}

{% endblock %}
{% block body_block %}
<div class="container" style="background:gray;width: 100%;">
	<select id="group_list" style="margin: 10px 5px 0 10px; padding: 5px; font-size: 12pt; font-weight: bold;">
		{% for group in groups %}
			<option value="{{group.name}}" >Group {{group.name}}</option>
		{% endfor %}
	</select>
	
	<select id="application_list" style="margin: 10px 5px 10px 10px; padding: 5px; font-size: 12pt; font-weight: bold;">
		{% for application in applications %}
			<option id="id_{{application.name}}" value="{{application.name}}">{{application.name}}</option>
		{% endfor %}
	</select>
	
	<select id="statistics_options" style="margin: 10px 5px 10px 10px; padding: 5px; font-size: 12pt; font-weight: bold;">
		<option value="time">Average Time</option>
		<option value="answers">Question Answers</option>
	</select>
	
	<button id="set_data_button" class="autocompare" style="margin: 10px 5px 10px 10px; padding: 5px; font-size: 12pt; font-weight: bold;">Set new data</button>
	<i class="fa fa-info-circle"></i><span class="landing-text">Please select!</span>
</div>
	<div id="container" style="width:100%; min-height:80vh; text-align: center;font-size: 12pt; font-weight: bold;"> </div>

{% endblock %}

{% block javascripts %}
	<script src="/static/js/highcharts.js"></script>
	<script src="/static/js/exporting.js"></script>
	<script src="/static/js/customEvents.js"></script>

<script src="http://code.highcharts.com/modules/data.js"></script>


<!-- Additional files for the Highslide popup effect -->
<script type="text/javascript" src="http://www.highcharts.com/media/com_demo/highslide-full.min.js"></script>
<script type="text/javascript" src="http://www.highcharts.com/media/com_demo/highslide.config.js" charset="utf-8"></script>
<link rel="stylesheet" type="text/css" href="http://www.highcharts.com/media/com_demo/highslide.css" />

	<script>
	
	
		{% autoescape off %}
		var app_questions_dict = {{app_questions_dict}};
		{% endautoescape %}
		var apps_without_questions=[];
		for (var application in app_questions_dict) {
			if (app_questions_dict[application].length == 0){
				apps_without_questions.push(application);
			}
		}
		console.log(apps_without_questions);
		

			var count=0;
		$(function () {
		
			var selected_option=document.getElementById("statistics_options").value;
			var selected_application=document.getElementById("application_list").value;
			var selected_group=document.getElementById("group_list").value;

			console.log(selected_option + selected_application + selected_group);
			
			
			$('#application_list').on('change', function() {
				selected_application = document.getElementById("application_list").value;
				if(selected_option=="answers"){
					$("#question_list").empty();
					addQuestions(selected_application);
				}
			});
			
			$('#group_list').on('change', function() {
				selected_group = document.getElementById("group_list").value;
			});
			
			$('#statistics_options').on('change', function() {
				selected_option = document.getElementById("statistics_options").value;
				if (this.value=="answers"){
					$( this ).after( "<select id='question_list' style='max-width:250px;margin: 10px 5px 10px 10px; padding: 5px; font-size: 12pt; font-weight: bold;'>	</select>" );
					for (var index in apps_without_questions) {
							$("#id_"+apps_without_questions[index]).wrap('<span/>'); //hide it-no questions (cross-browser compatible)
					}
					$("#application_list > option:first").attr("selected", "selected"); 
					selected_application = document.getElementById("application_list").value;
					console.log("Sel app" + selected_application);
					console.log($("#application_list > option:first").val()+"FC");
					
					addQuestions(selected_application);
				}
				
				else{
					if ($("#question_list").length > 0){
						$("#question_list").remove();
					}
					
					for (var index in apps_without_questions) {
						$("#id_"+apps_without_questions[index]).unwrap(); //hide it-no questions (cross-browser compatible)
					}
				}
			});


			// the button action
			$('#set_data_button').click(function () {

				$(".no_stats_info").remove();
				var categories=[];
				var sel_data=[];
				var chartType="";
				var question="";
				var xAxisTitle="Steps";
				var yAxisTitle="Seconds";
				var seriesName="Average time";
				console.log("%%%%%%%%%%%%%%%%%%%"+selected_option);
				if(selected_option=="time"){
					chartType="line";
				}
				else{
					xAxisTitle="Choices";
					yAxisTitle="Times chosen";
					seriesName="Times chosen";
					chartType="column";
					question=document.getElementById("question_list").value;
					console.log("#############"+question+"###################");
				}
				console.log("time");
				var request = $.get('/exerciser/update_graph/', {app_name:selected_application, group:selected_group, info_type:selected_option,question:question})
				//console.log("here");
				request.done(function(selected_data) {
					console.log("here");
					// when we get here, the request has succeeded.
					// this should mean that data is now the data from the ajax request (i.e. from the view above)

					console.log("sel" + sel_data);
					console.log("data " + sel_data);
					if(Object.getOwnPropertyNames(selected_data).length != 0){
						sel_data=selected_data["data"];
						questionSteps=selected_data["question_steps"];
						console.log(questionSteps);
						console.log("data>0");
						if(selected_option=="time"){
							for (i = 0; i < sel_data.length; i++) { 
								if(questionSteps.indexOf(i)  != -1){
									categories[i]="? " + (i+1);
								}
								else{
									categories[i]=(i+1);
								}
							}
						}
						else{
							var option_categories=[];
							var option_data=[];
							for (i = 0; i < sel_data.length; i++) { 
								for (var option in sel_data[i]) {
								  option_categories.push(option);
								  console.log(option);
								  option_data.push(sel_data[i][option]);
								  console.log(sel_data[i][option]);
								}
							}
							sel_data=option_data;
							categories=option_categories;
							console.log(sel_data);
							console.log(categories);
							
						}
										
						$('#container').highcharts({
										chart: {
											type: chartType
										},
										title: {
											text: selected_application + "- Group " + selected_group,
										events: {
											dblclick: function () {
												alert('dbclick on xAxis label');
											},
											click: function (event) {
												alert('click on xAxis label');
												console.log("??????"+event.point);
											},
											contextmenu: function () {
												alert('context menu on xAxis label');
											}
										}
										},
										subtitle: {
											text: question
										},
										xAxis: {
											categories:categories,
											title:{
												text: xAxisTitle
											}
										},
										yAxis: {
											title:{
												text: yAxisTitle
											}
										},
										
										plotOptions: {
											series: {
											
												dataLabels: {
												enabled: true,
												format: '{y} s<br/>Via next: {point.next} <br/>Via back: {point.prev} '
												},

												cursor: 'pointer',
												point: {
													events: {
														click: function (e) {
															if(questionSteps.indexOf(this.x)!=-1){
																hs.htmlExpand(null, {
																	pageOrigin: {
																		x: e.pageX || e.clientX,
																		y: e.pageY || e.clientY
																	},
																	headingText: this.series.name,
																	maincontentText: "	<div id='cont_"+count+"'> </div><br/> " +
																		this.x + ' visits',
																	width: 600,
																	height:330
																});
																getQuestionData(selected_application,selected_group,this.x);
															}
														}
													}
												},
												marker: {
													lineWidth: 1
												}
											}
										},

										series: [{
											showInLegend: false,
											name: seriesName,
											data: sel_data,
										}],
										tooltip: {
											formatter: function() {return ' ' +
												'Average time: ' + this.point.y +'<br />'+
												'Via next: ' + this.point.next + '<br />'+
												'Via back: ' + this.point.prev + '<br />' +
												'Expanation: ' + this.point.explanation + '<br />';
											}
										}
						});
						
						
						

					}
					
							
					else{
						$('#container').find('.highcharts-container').hide();
						$('#container').html("<div class='no_stats_info'><br\><br\><br\><br\><br\><br\><i class='fa fa-asterisk' style='color:red'></i><span style='color:red'>There are no statistics for the current selection</span><div>");
					}
				});

			});
		});

function getQuestionData(selected_application,selected_group,selected_step){

	var request = $.get('/exerciser/question_graph/', {app_name:"HorizontalLines", group:"f",step:selected_step});


	request.done(function(selected_data) {
		console.log("request done");
		if(Object.getOwnPropertyNames(selected_data).length != 0){
			sel_data=selected_data["data"];
			questionText=selected_data["question"];
			console.log(questionText);
			console.log("in custom");
			var option_categories=[];
			var option_data=[];
			for (i = 0; i < sel_data.length; i++) { 
				for (var option in sel_data[i]) {
					option_categories.push(option);
					console.log(option);
					option_data.push(sel_data[i][option]);
					console.log(sel_data[i][option]);
				}
			}
			sel_data=option_data;
			categories=option_categories;

       		$('#cont_'+count).highcharts({
				chart: {
					type: "column"
				},
				title: {
					text: selected_application + "- Group " + selected_group,
				},
				subtitle: {
					text: questionText
				},
				xAxis: {
					categories:option_categories,
					title:{
						text: "answers"
					}
				},
				yAxis: {
					title:{
						text: "Times chosen"
					}
				},
				series: [{
					showInLegend: false,
					name: "Times chosen",
					data: sel_data,
				}]
			});
			
	
		}
		count++;
	});

}		

function addQuestions(selected_application){
	for (var question_index in app_questions_dict[selected_application]){
		var question = app_questions_dict[selected_application][question_index];
		var option="<option value='" + question +"' >"+question + "</option>";
		console.log(question);
		$("#question_list").append(option);
	}
}
	</script>
{% endblock %}

