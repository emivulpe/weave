### Checks added. Needs refactoring ###
def update_graph_student(request):
	try:
		app_name=request.GET['app_name']
		group_name=request.GET['group']
		year = request.GET['year']		
		student_id = request.GET['student']	
	except KeyError:
		return HttpResponse(simplejson.dumps({'error':'Bad input supplied'}), content_type="application/json")
		
	print 1
	teacher_username = request.user
	try:
		user=User.objects.filter(username=teacher_username)[0]
		teacher=Teacher.objects.filter(user=user)[0]
		academic_year = AcademicYear.objects.filter(start=year)[0]
		selected_group = Group.objects.filter(name = group_name,teacher=teacher,academic_year=academic_year)[0]
		selected_application=Application.objects.filter(name=app_name)[0]
		student = Student.objects.filter(student_id=student_id)[0]
	except IndexError:
		return HttpResponse(simplejson.dumps({'error':'Bad input supplied'}), content_type="application/json")
		
	print 2
	selected_data={}
	usage_records = UsageRecord.objects.filter(application=selected_application,teacher=teacher,group=selected_group, student=student)
	print 4
	question_steps=[]
	app_questions=Question.objects.filter(application=selected_application)
	for question in app_questions:
		question_steps.append(question.step.order)
	print 5
	sd=[]
	#### Getting averages ##########
	steps = Step.objects.filter(application=selected_application)
	num_steps = steps.aggregate(max = Max('order'))
	print 6
	if num_steps['max'] != None:
		print 7
		print num_steps['max'], "step num"
		for step_num in range(1, num_steps['max']+1):
			print step_num, " step num"
			explanation_text=""
			step=steps.filter(order=step_num)
			if len(step)>0:
				step=step[0]
				explanation=Explanation.objects.filter(step=step)
				if len(explanation)>0:
					explanation=explanation[0]
					explanation_text=explanation.text
					if len(explanation_text)<100:
						explanation_text_start=explanation_text[:len(explanation_text)]
					else:
						explanation_text_start=explanation_text[:100]

				records = usage_records.filter(step = step)
				total_time = records.aggregate(time = Sum('time_on_step'))

				revisited_steps_count=len(records.filter(direction="back"))
				print total_time['time'] , "Time"
				sd.append({"y":total_time['time'],"revisited_count":revisited_steps_count,"explanation":explanation_text,"explanation_start":explanation_text_start})
	if sd!=[]:
		selected_data["data"]=sd
		print sd , " SD PRINTED"
		selected_data["question_steps"]=question_steps

	return HttpResponse(simplejson.dumps(selected_data), content_type="application/json")